#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProductionTracker.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ManufacturingDB")]
	public partial class ManufacturingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBodyStyle(BodyStyle instance);
    partial void UpdateBodyStyle(BodyStyle instance);
    partial void DeleteBodyStyle(BodyStyle instance);
    partial void InsertSleeve(Sleeve instance);
    partial void UpdateSleeve(Sleeve instance);
    partial void DeleteSleeve(Sleeve instance);
    partial void InsertColorDetail(ColorDetail instance);
    partial void UpdateColorDetail(ColorDetail instance);
    partial void DeleteColorDetail(ColorDetail instance);
    partial void InsertColor(Color instance);
    partial void UpdateColor(Color instance);
    partial void DeleteColor(Color instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertMaterial(Material instance);
    partial void UpdateMaterial(Material instance);
    partial void DeleteMaterial(Material instance);
    partial void InsertSize(Size instance);
    partial void UpdateSize(Size instance);
    partial void DeleteSize(Size instance);
    partial void InsertProduction(Production instance);
    partial void UpdateProduction(Production instance);
    partial void DeleteProduction(Production instance);
    partial void InsertReceivingItemsTransaction(ReceivingItemsTransaction instance);
    partial void UpdateReceivingItemsTransaction(ReceivingItemsTransaction instance);
    partial void DeleteReceivingItemsTransaction(ReceivingItemsTransaction instance);
    partial void InsertCuttingInstructionSize(CuttingInstructionSize instance);
    partial void UpdateCuttingInstructionSize(CuttingInstructionSize instance);
    partial void DeleteCuttingInstructionSize(CuttingInstructionSize instance);
    partial void InsertFabric(Fabric instance);
    partial void UpdateFabric(Fabric instance);
    partial void DeleteFabric(Fabric instance);
    partial void InsertCuttingInstructionDetailRoll(CuttingInstructionDetailRoll instance);
    partial void UpdateCuttingInstructionDetailRoll(CuttingInstructionDetailRoll instance);
    partial void DeleteCuttingInstructionDetailRoll(CuttingInstructionDetailRoll instance);
    partial void InsertRoll(Roll instance);
    partial void UpdateRoll(Roll instance);
    partial void DeleteRoll(Roll instance);
    partial void InsertMarker(Marker instance);
    partial void UpdateMarker(Marker instance);
    partial void DeleteMarker(Marker instance);
    partial void InsertMarkerDetail(MarkerDetail instance);
    partial void UpdateMarkerDetail(MarkerDetail instance);
    partial void DeleteMarkerDetail(MarkerDetail instance);
    partial void InsertCuttingInstructionDetail(CuttingInstructionDetail instance);
    partial void UpdateCuttingInstructionDetail(CuttingInstructionDetail instance);
    partial void DeleteCuttingInstructionDetail(CuttingInstructionDetail instance);
    partial void InsertCuttingInstructionItem(CuttingInstructionItem instance);
    partial void UpdateCuttingInstructionItem(CuttingInstructionItem instance);
    partial void DeleteCuttingInstructionItem(CuttingInstructionItem instance);
    partial void InsertProductionCatergory(ProductionCatergory instance);
    partial void UpdateProductionCatergory(ProductionCatergory instance);
    partial void DeleteProductionCatergory(ProductionCatergory instance);
    partial void InsertMarkerCategory(MarkerCategory instance);
    partial void UpdateMarkerCategory(MarkerCategory instance);
    partial void DeleteMarkerCategory(MarkerCategory instance);
    partial void InsertPlannedProduction(PlannedProduction instance);
    partial void UpdatePlannedProduction(PlannedProduction instance);
    partial void DeletePlannedProduction(PlannedProduction instance);
    partial void InsertPlannedProductionDetail(PlannedProductionDetail instance);
    partial void UpdatePlannedProductionDetail(PlannedProductionDetail instance);
    partial void DeletePlannedProductionDetail(PlannedProductionDetail instance);
    partial void InsertCuttingInstruction(CuttingInstruction instance);
    partial void UpdateCuttingInstruction(CuttingInstruction instance);
    partial void DeleteCuttingInstruction(CuttingInstruction instance);
    #endregion
		
		public ManufacturingDataContext() : 
				base(global::ProductionTracker.Data.Properties.Settings.Default.ManufacturingDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BodyStyle> BodyStyles
		{
			get
			{
				return this.GetTable<BodyStyle>();
			}
		}
		
		public System.Data.Linq.Table<Sleeve> Sleeves
		{
			get
			{
				return this.GetTable<Sleeve>();
			}
		}
		
		public System.Data.Linq.Table<ColorDetail> ColorDetails
		{
			get
			{
				return this.GetTable<ColorDetail>();
			}
		}
		
		public System.Data.Linq.Table<Color> Colors
		{
			get
			{
				return this.GetTable<Color>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Material> Materials
		{
			get
			{
				return this.GetTable<Material>();
			}
		}
		
		public System.Data.Linq.Table<Size> Sizes
		{
			get
			{
				return this.GetTable<Size>();
			}
		}
		
		public System.Data.Linq.Table<Production> Productions
		{
			get
			{
				return this.GetTable<Production>();
			}
		}
		
		public System.Data.Linq.Table<ReceivingItemsTransaction> ReceivingItemsTransactions
		{
			get
			{
				return this.GetTable<ReceivingItemsTransaction>();
			}
		}
		
		public System.Data.Linq.Table<CuttingInstructionSize> CuttingInstructionSizes
		{
			get
			{
				return this.GetTable<CuttingInstructionSize>();
			}
		}
		
		public System.Data.Linq.Table<Fabric> Fabrics
		{
			get
			{
				return this.GetTable<Fabric>();
			}
		}
		
		public System.Data.Linq.Table<CuttingInstructionDetailRoll> CuttingInstructionDetailRolls
		{
			get
			{
				return this.GetTable<CuttingInstructionDetailRoll>();
			}
		}
		
		public System.Data.Linq.Table<Roll> Rolls
		{
			get
			{
				return this.GetTable<Roll>();
			}
		}
		
		public System.Data.Linq.Table<Marker> Markers
		{
			get
			{
				return this.GetTable<Marker>();
			}
		}
		
		public System.Data.Linq.Table<MarkerDetail> MarkerDetails
		{
			get
			{
				return this.GetTable<MarkerDetail>();
			}
		}
		
		public System.Data.Linq.Table<CuttingInstructionDetail> CuttingInstructionDetails
		{
			get
			{
				return this.GetTable<CuttingInstructionDetail>();
			}
		}
		
		public System.Data.Linq.Table<CuttingInstructionItem> CuttingInstructionItems
		{
			get
			{
				return this.GetTable<CuttingInstructionItem>();
			}
		}
		
		public System.Data.Linq.Table<ProductionCatergory> ProductionCatergories
		{
			get
			{
				return this.GetTable<ProductionCatergory>();
			}
		}
		
		public System.Data.Linq.Table<MarkerCategory> MarkerCategories
		{
			get
			{
				return this.GetTable<MarkerCategory>();
			}
		}
		
		public System.Data.Linq.Table<PlannedProduction> PlannedProductions
		{
			get
			{
				return this.GetTable<PlannedProduction>();
			}
		}
		
		public System.Data.Linq.Table<PlannedProductionDetail> PlannedProductionDetails
		{
			get
			{
				return this.GetTable<PlannedProductionDetail>();
			}
		}
		
		public System.Data.Linq.Table<CuttingInstruction> CuttingInstructions
		{
			get
			{
				return this.GetTable<CuttingInstruction>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ItemsForBarcodes2")]
		public ISingleResult<ItemsForBarcodes2Result> ItemsForBarcodes2()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ItemsForBarcodes2Result>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BodyStyle")]
	public partial class BodyStyle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<MarkerCategory> _MarkerCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BodyStyle()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._MarkerCategories = new EntitySet<MarkerCategory>(new Action<MarkerCategory>(this.attach_MarkerCategories), new Action<MarkerCategory>(this.detach_MarkerCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyStyle_Item", Storage="_Items", ThisKey="Id", OtherKey="BodyStyleId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyStyle_MarkerCategory", Storage="_MarkerCategories", ThisKey="Id", OtherKey="BodyStyleId")]
		public EntitySet<MarkerCategory> MarkerCategories
		{
			get
			{
				return this._MarkerCategories;
			}
			set
			{
				this._MarkerCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.BodyStyle = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.BodyStyle = null;
		}
		
		private void attach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.BodyStyle = this;
		}
		
		private void detach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.BodyStyle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sleeves")]
	public partial class Sleeve : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<MarkerCategory> _MarkerCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Sleeve()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._MarkerCategories = new EntitySet<MarkerCategory>(new Action<MarkerCategory>(this.attach_MarkerCategories), new Action<MarkerCategory>(this.detach_MarkerCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sleeve_Item", Storage="_Items", ThisKey="Id", OtherKey="SleeveId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sleeve_MarkerCategory", Storage="_MarkerCategories", ThisKey="Id", OtherKey="SleeveId")]
		public EntitySet<MarkerCategory> MarkerCategories
		{
			get
			{
				return this._MarkerCategories;
			}
			set
			{
				this._MarkerCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Sleeve = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Sleeve = null;
		}
		
		private void attach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Sleeve = this;
		}
		
		private void detach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Sleeve = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ColorDetails")]
	public partial class ColorDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ColorId;
		
		private string _Name;
		
		private EntityRef<Color> _Color;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColorIdChanging(int value);
    partial void OnColorIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ColorDetail()
		{
			this._Color = default(EntityRef<Color>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ColorId
		{
			get
			{
				return this._ColorId;
			}
			set
			{
				if ((this._ColorId != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIdChanging(value);
					this.SendPropertyChanging();
					this._ColorId = value;
					this.SendPropertyChanged("ColorId");
					this.OnColorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_ColorDetail", Storage="_Color", ThisKey="ColorId", OtherKey="Id", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.ColorDetails.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.ColorDetails.Add(this);
						this._ColorId = value.Id;
					}
					else
					{
						this._ColorId = default(int);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Colors")]
	public partial class Color : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ColorDetail> _ColorDetails;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<Fabric> _Fabrics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Color()
		{
			this._ColorDetails = new EntitySet<ColorDetail>(new Action<ColorDetail>(this.attach_ColorDetails), new Action<ColorDetail>(this.detach_ColorDetails));
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._Fabrics = new EntitySet<Fabric>(new Action<Fabric>(this.attach_Fabrics), new Action<Fabric>(this.detach_Fabrics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_ColorDetail", Storage="_ColorDetails", ThisKey="Id", OtherKey="ColorId")]
		public EntitySet<ColorDetail> ColorDetails
		{
			get
			{
				return this._ColorDetails;
			}
			set
			{
				this._ColorDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Item", Storage="_Items", ThisKey="Id", OtherKey="ColorId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Fabric", Storage="_Fabrics", ThisKey="Id", OtherKey="ColorId")]
		public EntitySet<Fabric> Fabrics
		{
			get
			{
				return this._Fabrics;
			}
			set
			{
				this._Fabrics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ColorDetails(ColorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_ColorDetails(ColorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
		
		private void attach_Fabrics(Fabric entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_Fabrics(Fabric entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<MarkerCategory> _MarkerCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Department()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._MarkerCategories = new EntitySet<MarkerCategory>(new Action<MarkerCategory>(this.attach_MarkerCategories), new Action<MarkerCategory>(this.detach_MarkerCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Item", Storage="_Items", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_MarkerCategory", Storage="_MarkerCategories", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<MarkerCategory> MarkerCategories
		{
			get
			{
				return this._MarkerCategories;
			}
			set
			{
				this._MarkerCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SKU;
		
		private int _ColorId;
		
		private int _SizeId;
		
		private int _DepartmentId;
		
		private int _MaterialId;
		
		private int _SleeveId;
		
		private int _BodyStyleId;
		
		private string _SizeDescription;
		
		private string _BodyStyleAttributte;
		
		private EntitySet<ReceivingItemsTransaction> _ReceivingItemsTransactions;
		
		private EntitySet<CuttingInstructionItem> _CuttingInstructionItems;
		
		private EntitySet<PlannedProductionDetail> _PlannedProductionDetails;
		
		private EntityRef<BodyStyle> _BodyStyle;
		
		private EntityRef<Color> _Color;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Sleeve> _Sleeve;
		
		private EntityRef<Material> _Material;
		
		private EntityRef<Size> _Size;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnColorIdChanging(int value);
    partial void OnColorIdChanged();
    partial void OnSizeIdChanging(int value);
    partial void OnSizeIdChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnMaterialIdChanging(int value);
    partial void OnMaterialIdChanged();
    partial void OnSleeveIdChanging(int value);
    partial void OnSleeveIdChanged();
    partial void OnBodyStyleIdChanging(int value);
    partial void OnBodyStyleIdChanged();
    partial void OnSizeDescriptionChanging(string value);
    partial void OnSizeDescriptionChanged();
    partial void OnBodyStyleAttributteChanging(string value);
    partial void OnBodyStyleAttributteChanged();
    #endregion
		
		public Item()
		{
			this._ReceivingItemsTransactions = new EntitySet<ReceivingItemsTransaction>(new Action<ReceivingItemsTransaction>(this.attach_ReceivingItemsTransactions), new Action<ReceivingItemsTransaction>(this.detach_ReceivingItemsTransactions));
			this._CuttingInstructionItems = new EntitySet<CuttingInstructionItem>(new Action<CuttingInstructionItem>(this.attach_CuttingInstructionItems), new Action<CuttingInstructionItem>(this.detach_CuttingInstructionItems));
			this._PlannedProductionDetails = new EntitySet<PlannedProductionDetail>(new Action<PlannedProductionDetail>(this.attach_PlannedProductionDetails), new Action<PlannedProductionDetail>(this.detach_PlannedProductionDetails));
			this._BodyStyle = default(EntityRef<BodyStyle>);
			this._Color = default(EntityRef<Color>);
			this._Department = default(EntityRef<Department>);
			this._Sleeve = default(EntityRef<Sleeve>);
			this._Material = default(EntityRef<Material>);
			this._Size = default(EntityRef<Size>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SKU", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorId", DbType="Int NOT NULL")]
		public int ColorId
		{
			get
			{
				return this._ColorId;
			}
			set
			{
				if ((this._ColorId != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIdChanging(value);
					this.SendPropertyChanging();
					this._ColorId = value;
					this.SendPropertyChanged("ColorId");
					this.OnColorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeId", DbType="Int NOT NULL")]
		public int SizeId
		{
			get
			{
				return this._SizeId;
			}
			set
			{
				if ((this._SizeId != value))
				{
					if (this._Size.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSizeIdChanging(value);
					this.SendPropertyChanging();
					this._SizeId = value;
					this.SendPropertyChanged("SizeId");
					this.OnSizeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialId", DbType="Int NOT NULL")]
		public int MaterialId
		{
			get
			{
				return this._MaterialId;
			}
			set
			{
				if ((this._MaterialId != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIdChanging(value);
					this.SendPropertyChanging();
					this._MaterialId = value;
					this.SendPropertyChanged("MaterialId");
					this.OnMaterialIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SleeveId", DbType="Int NOT NULL")]
		public int SleeveId
		{
			get
			{
				return this._SleeveId;
			}
			set
			{
				if ((this._SleeveId != value))
				{
					if (this._Sleeve.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSleeveIdChanging(value);
					this.SendPropertyChanging();
					this._SleeveId = value;
					this.SendPropertyChanged("SleeveId");
					this.OnSleeveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyStyleId", DbType="Int NOT NULL")]
		public int BodyStyleId
		{
			get
			{
				return this._BodyStyleId;
			}
			set
			{
				if ((this._BodyStyleId != value))
				{
					if (this._BodyStyle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBodyStyleIdChanging(value);
					this.SendPropertyChanging();
					this._BodyStyleId = value;
					this.SendPropertyChanged("BodyStyleId");
					this.OnBodyStyleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeDescription", DbType="VarChar(50)")]
		public string SizeDescription
		{
			get
			{
				return this._SizeDescription;
			}
			set
			{
				if ((this._SizeDescription != value))
				{
					this.OnSizeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SizeDescription = value;
					this.SendPropertyChanged("SizeDescription");
					this.OnSizeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyStyleAttributte", DbType="VarChar(50)")]
		public string BodyStyleAttributte
		{
			get
			{
				return this._BodyStyleAttributte;
			}
			set
			{
				if ((this._BodyStyleAttributte != value))
				{
					this.OnBodyStyleAttributteChanging(value);
					this.SendPropertyChanging();
					this._BodyStyleAttributte = value;
					this.SendPropertyChanged("BodyStyleAttributte");
					this.OnBodyStyleAttributteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ReceivingItemsTransaction", Storage="_ReceivingItemsTransactions", ThisKey="Id", OtherKey="ItemId")]
		public EntitySet<ReceivingItemsTransaction> ReceivingItemsTransactions
		{
			get
			{
				return this._ReceivingItemsTransactions;
			}
			set
			{
				this._ReceivingItemsTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_CuttingInstructionItem", Storage="_CuttingInstructionItems", ThisKey="Id", OtherKey="ItemId")]
		public EntitySet<CuttingInstructionItem> CuttingInstructionItems
		{
			get
			{
				return this._CuttingInstructionItems;
			}
			set
			{
				this._CuttingInstructionItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_PlannedProductionDetail", Storage="_PlannedProductionDetails", ThisKey="Id", OtherKey="ItemId")]
		public EntitySet<PlannedProductionDetail> PlannedProductionDetails
		{
			get
			{
				return this._PlannedProductionDetails;
			}
			set
			{
				this._PlannedProductionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyStyle_Item", Storage="_BodyStyle", ThisKey="BodyStyleId", OtherKey="Id", IsForeignKey=true)]
		public BodyStyle BodyStyle
		{
			get
			{
				return this._BodyStyle.Entity;
			}
			set
			{
				BodyStyle previousValue = this._BodyStyle.Entity;
				if (((previousValue != value) 
							|| (this._BodyStyle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BodyStyle.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._BodyStyle.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._BodyStyleId = value.Id;
					}
					else
					{
						this._BodyStyleId = default(int);
					}
					this.SendPropertyChanged("BodyStyle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Item", Storage="_Color", ThisKey="ColorId", OtherKey="Id", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._ColorId = value.Id;
					}
					else
					{
						this._ColorId = default(int);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Item", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sleeve_Item", Storage="_Sleeve", ThisKey="SleeveId", OtherKey="Id", IsForeignKey=true)]
		public Sleeve Sleeve
		{
			get
			{
				return this._Sleeve.Entity;
			}
			set
			{
				Sleeve previousValue = this._Sleeve.Entity;
				if (((previousValue != value) 
							|| (this._Sleeve.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sleeve.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Sleeve.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._SleeveId = value.Id;
					}
					else
					{
						this._SleeveId = default(int);
					}
					this.SendPropertyChanged("Sleeve");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Item", Storage="_Material", ThisKey="MaterialId", OtherKey="Id", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._MaterialId = value.Id;
					}
					else
					{
						this._MaterialId = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_Item", Storage="_Size", ThisKey="SizeId", OtherKey="Id", IsForeignKey=true)]
		public Size Size
		{
			get
			{
				return this._Size.Entity;
			}
			set
			{
				Size previousValue = this._Size.Entity;
				if (((previousValue != value) 
							|| (this._Size.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Size.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Size.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._SizeId = value.Id;
					}
					else
					{
						this._SizeId = default(int);
					}
					this.SendPropertyChanged("Size");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReceivingItemsTransactions(ReceivingItemsTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ReceivingItemsTransactions(ReceivingItemsTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_CuttingInstructionItems(CuttingInstructionItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_CuttingInstructionItems(CuttingInstructionItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_PlannedProductionDetails(PlannedProductionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_PlannedProductionDetails(PlannedProductionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Materials")]
	public partial class Material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private decimal _PricePerYard;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<Fabric> _Fabrics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPricePerYardChanging(decimal value);
    partial void OnPricePerYardChanged();
    #endregion
		
		public Material()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._Fabrics = new EntitySet<Fabric>(new Action<Fabric>(this.attach_Fabrics), new Action<Fabric>(this.detach_Fabrics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerYard", DbType="Money NOT NULL")]
		public decimal PricePerYard
		{
			get
			{
				return this._PricePerYard;
			}
			set
			{
				if ((this._PricePerYard != value))
				{
					this.OnPricePerYardChanging(value);
					this.SendPropertyChanging();
					this._PricePerYard = value;
					this.SendPropertyChanged("PricePerYard");
					this.OnPricePerYardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Item", Storage="_Items", ThisKey="Id", OtherKey="MaterialId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Fabric", Storage="_Fabrics", ThisKey="Id", OtherKey="MaterialId")]
		public EntitySet<Fabric> Fabrics
		{
			get
			{
				return this._Fabrics;
			}
			set
			{
				this._Fabrics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
		
		private void attach_Fabrics(Fabric entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Fabrics(Fabric entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sizes")]
	public partial class Size : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<CuttingInstructionSize> _CuttingInstructionSizes;
		
		private EntitySet<MarkerDetail> _MarkerDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Size()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._CuttingInstructionSizes = new EntitySet<CuttingInstructionSize>(new Action<CuttingInstructionSize>(this.attach_CuttingInstructionSizes), new Action<CuttingInstructionSize>(this.detach_CuttingInstructionSizes));
			this._MarkerDetails = new EntitySet<MarkerDetail>(new Action<MarkerDetail>(this.attach_MarkerDetails), new Action<MarkerDetail>(this.detach_MarkerDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_Item", Storage="_Items", ThisKey="Id", OtherKey="SizeId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_CuttingInstructionSize", Storage="_CuttingInstructionSizes", ThisKey="Id", OtherKey="SizeId")]
		public EntitySet<CuttingInstructionSize> CuttingInstructionSizes
		{
			get
			{
				return this._CuttingInstructionSizes;
			}
			set
			{
				this._CuttingInstructionSizes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_MarkerDetail", Storage="_MarkerDetails", ThisKey="Id", OtherKey="SizeId")]
		public EntitySet<MarkerDetail> MarkerDetails
		{
			get
			{
				return this._MarkerDetails;
			}
			set
			{
				this._MarkerDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Size = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Size = null;
		}
		
		private void attach_CuttingInstructionSizes(CuttingInstructionSize entity)
		{
			this.SendPropertyChanging();
			entity.Size = this;
		}
		
		private void detach_CuttingInstructionSizes(CuttingInstructionSize entity)
		{
			this.SendPropertyChanging();
			entity.Size = null;
		}
		
		private void attach_MarkerDetails(MarkerDetail entity)
		{
			this.SendPropertyChanging();
			entity.Size = this;
		}
		
		private void detach_MarkerDetails(MarkerDetail entity)
		{
			this.SendPropertyChanging();
			entity.Size = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Productions")]
	public partial class Production : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date;
		
		private EntitySet<CuttingInstruction> _CuttingInstructions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Production()
		{
			this._CuttingInstructions = new EntitySet<CuttingInstruction>(new Action<CuttingInstruction>(this.attach_CuttingInstructions), new Action<CuttingInstruction>(this.detach_CuttingInstructions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Production_CuttingInstruction", Storage="_CuttingInstructions", ThisKey="Id", OtherKey="ProductionId")]
		public EntitySet<CuttingInstruction> CuttingInstructions
		{
			get
			{
				return this._CuttingInstructions;
			}
			set
			{
				this._CuttingInstructions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CuttingInstructions(CuttingInstruction entity)
		{
			this.SendPropertyChanging();
			entity.Production = this;
		}
		
		private void detach_CuttingInstructions(CuttingInstruction entity)
		{
			this.SendPropertyChanging();
			entity.Production = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReceivingItemsTransactions")]
	public partial class ReceivingItemsTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CuttingInstuctionId;
		
		private int _ItemId;
		
		private bool _Adjusment;
		
		private int _Quantity;
		
		private System.DateTime _Date;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<CuttingInstruction> _CuttingInstruction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCuttingInstuctionIdChanging(int value);
    partial void OnCuttingInstuctionIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnAdjusmentChanging(bool value);
    partial void OnAdjusmentChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public ReceivingItemsTransaction()
		{
			this._Item = default(EntityRef<Item>);
			this._CuttingInstruction = default(EntityRef<CuttingInstruction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CuttingInstuctionId", DbType="Int NOT NULL")]
		public int CuttingInstuctionId
		{
			get
			{
				return this._CuttingInstuctionId;
			}
			set
			{
				if ((this._CuttingInstuctionId != value))
				{
					if (this._CuttingInstruction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCuttingInstuctionIdChanging(value);
					this.SendPropertyChanging();
					this._CuttingInstuctionId = value;
					this.SendPropertyChanged("CuttingInstuctionId");
					this.OnCuttingInstuctionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adjusment", DbType="Bit NOT NULL")]
		public bool Adjusment
		{
			get
			{
				return this._Adjusment;
			}
			set
			{
				if ((this._Adjusment != value))
				{
					this.OnAdjusmentChanging(value);
					this.SendPropertyChanging();
					this._Adjusment = value;
					this.SendPropertyChanged("Adjusment");
					this.OnAdjusmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ReceivingItemsTransaction", Storage="_Item", ThisKey="ItemId", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ReceivingItemsTransactions.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ReceivingItemsTransactions.Add(this);
						this._ItemId = value.Id;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuttingInstruction_ReceivingItemsTransaction", Storage="_CuttingInstruction", ThisKey="CuttingInstuctionId", OtherKey="Id", IsForeignKey=true)]
		public CuttingInstruction CuttingInstruction
		{
			get
			{
				return this._CuttingInstruction.Entity;
			}
			set
			{
				CuttingInstruction previousValue = this._CuttingInstruction.Entity;
				if (((previousValue != value) 
							|| (this._CuttingInstruction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CuttingInstruction.Entity = null;
						previousValue.ReceivingItemsTransactions.Remove(this);
					}
					this._CuttingInstruction.Entity = value;
					if ((value != null))
					{
						value.ReceivingItemsTransactions.Add(this);
						this._CuttingInstuctionId = value.Id;
					}
					else
					{
						this._CuttingInstuctionId = default(int);
					}
					this.SendPropertyChanged("CuttingInstruction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CuttingInstructionSizes")]
	public partial class CuttingInstructionSize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SizeId;
		
		private int _AmountPerLayer;
		
		private int _CuttingInstructId;
		
		private EntityRef<Size> _Size;
		
		private EntityRef<CuttingInstruction> _CuttingInstruction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSizeIdChanging(int value);
    partial void OnSizeIdChanged();
    partial void OnAmountPerLayerChanging(int value);
    partial void OnAmountPerLayerChanged();
    partial void OnCuttingInstructIdChanging(int value);
    partial void OnCuttingInstructIdChanged();
    #endregion
		
		public CuttingInstructionSize()
		{
			this._Size = default(EntityRef<Size>);
			this._CuttingInstruction = default(EntityRef<CuttingInstruction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SizeId
		{
			get
			{
				return this._SizeId;
			}
			set
			{
				if ((this._SizeId != value))
				{
					if (this._Size.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSizeIdChanging(value);
					this.SendPropertyChanging();
					this._SizeId = value;
					this.SendPropertyChanged("SizeId");
					this.OnSizeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPerLayer", DbType="Int NOT NULL")]
		public int AmountPerLayer
		{
			get
			{
				return this._AmountPerLayer;
			}
			set
			{
				if ((this._AmountPerLayer != value))
				{
					this.OnAmountPerLayerChanging(value);
					this.SendPropertyChanging();
					this._AmountPerLayer = value;
					this.SendPropertyChanged("AmountPerLayer");
					this.OnAmountPerLayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CuttingInstructId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CuttingInstructId
		{
			get
			{
				return this._CuttingInstructId;
			}
			set
			{
				if ((this._CuttingInstructId != value))
				{
					if (this._CuttingInstruction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCuttingInstructIdChanging(value);
					this.SendPropertyChanging();
					this._CuttingInstructId = value;
					this.SendPropertyChanged("CuttingInstructId");
					this.OnCuttingInstructIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_CuttingInstructionSize", Storage="_Size", ThisKey="SizeId", OtherKey="Id", IsForeignKey=true)]
		public Size Size
		{
			get
			{
				return this._Size.Entity;
			}
			set
			{
				Size previousValue = this._Size.Entity;
				if (((previousValue != value) 
							|| (this._Size.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Size.Entity = null;
						previousValue.CuttingInstructionSizes.Remove(this);
					}
					this._Size.Entity = value;
					if ((value != null))
					{
						value.CuttingInstructionSizes.Add(this);
						this._SizeId = value.Id;
					}
					else
					{
						this._SizeId = default(int);
					}
					this.SendPropertyChanged("Size");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuttingInstruction_CuttingInstructionSize", Storage="_CuttingInstruction", ThisKey="CuttingInstructId", OtherKey="Id", IsForeignKey=true)]
		public CuttingInstruction CuttingInstruction
		{
			get
			{
				return this._CuttingInstruction.Entity;
			}
			set
			{
				CuttingInstruction previousValue = this._CuttingInstruction.Entity;
				if (((previousValue != value) 
							|| (this._CuttingInstruction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CuttingInstruction.Entity = null;
						previousValue.CuttingInstructionSizes.Remove(this);
					}
					this._CuttingInstruction.Entity = value;
					if ((value != null))
					{
						value.CuttingInstructionSizes.Add(this);
						this._CuttingInstructId = value.Id;
					}
					else
					{
						this._CuttingInstructId = default(int);
					}
					this.SendPropertyChanged("CuttingInstruction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fabrics")]
	public partial class Fabric : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ColorId;
		
		private int _MaterialId;
		
		private EntitySet<CuttingInstructionDetail> _CuttingInstructionDetails;
		
		private EntityRef<Color> _Color;
		
		private EntityRef<Material> _Material;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnColorIdChanging(int value);
    partial void OnColorIdChanged();
    partial void OnMaterialIdChanging(int value);
    partial void OnMaterialIdChanged();
    #endregion
		
		public Fabric()
		{
			this._CuttingInstructionDetails = new EntitySet<CuttingInstructionDetail>(new Action<CuttingInstructionDetail>(this.attach_CuttingInstructionDetails), new Action<CuttingInstructionDetail>(this.detach_CuttingInstructionDetails));
			this._Color = default(EntityRef<Color>);
			this._Material = default(EntityRef<Material>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorId", DbType="Int NOT NULL")]
		public int ColorId
		{
			get
			{
				return this._ColorId;
			}
			set
			{
				if ((this._ColorId != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIdChanging(value);
					this.SendPropertyChanging();
					this._ColorId = value;
					this.SendPropertyChanged("ColorId");
					this.OnColorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialId", DbType="Int NOT NULL")]
		public int MaterialId
		{
			get
			{
				return this._MaterialId;
			}
			set
			{
				if ((this._MaterialId != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIdChanging(value);
					this.SendPropertyChanging();
					this._MaterialId = value;
					this.SendPropertyChanged("MaterialId");
					this.OnMaterialIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fabric_CuttingInstructionDetail", Storage="_CuttingInstructionDetails", ThisKey="Id", OtherKey="FabricId")]
		public EntitySet<CuttingInstructionDetail> CuttingInstructionDetails
		{
			get
			{
				return this._CuttingInstructionDetails;
			}
			set
			{
				this._CuttingInstructionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Fabric", Storage="_Color", ThisKey="ColorId", OtherKey="Id", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.Fabrics.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.Fabrics.Add(this);
						this._ColorId = value.Id;
					}
					else
					{
						this._ColorId = default(int);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Fabric", Storage="_Material", ThisKey="MaterialId", OtherKey="Id", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Fabrics.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Fabrics.Add(this);
						this._MaterialId = value.Id;
					}
					else
					{
						this._MaterialId = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CuttingInstructionDetails(CuttingInstructionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Fabric = this;
		}
		
		private void detach_CuttingInstructionDetails(CuttingInstructionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Fabric = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CuttingInstructionDetailRolls")]
	public partial class CuttingInstructionDetailRoll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Yards;
		
		private int _CuttingInstructionDetailId;
		
		private int _RollId;
		
		private EntityRef<Roll> _Roll;
		
		private EntityRef<CuttingInstructionDetail> _CuttingInstructionDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnYardsChanging(int value);
    partial void OnYardsChanged();
    partial void OnCuttingInstructionDetailIdChanging(int value);
    partial void OnCuttingInstructionDetailIdChanged();
    partial void OnRollIdChanging(int value);
    partial void OnRollIdChanged();
    #endregion
		
		public CuttingInstructionDetailRoll()
		{
			this._Roll = default(EntityRef<Roll>);
			this._CuttingInstructionDetail = default(EntityRef<CuttingInstructionDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Yards", DbType="Int NOT NULL")]
		public int Yards
		{
			get
			{
				return this._Yards;
			}
			set
			{
				if ((this._Yards != value))
				{
					this.OnYardsChanging(value);
					this.SendPropertyChanging();
					this._Yards = value;
					this.SendPropertyChanged("Yards");
					this.OnYardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CuttingInstructionDetailId", DbType="Int NOT NULL")]
		public int CuttingInstructionDetailId
		{
			get
			{
				return this._CuttingInstructionDetailId;
			}
			set
			{
				if ((this._CuttingInstructionDetailId != value))
				{
					if (this._CuttingInstructionDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCuttingInstructionDetailIdChanging(value);
					this.SendPropertyChanging();
					this._CuttingInstructionDetailId = value;
					this.SendPropertyChanged("CuttingInstructionDetailId");
					this.OnCuttingInstructionDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollId", DbType="Int NOT NULL")]
		public int RollId
		{
			get
			{
				return this._RollId;
			}
			set
			{
				if ((this._RollId != value))
				{
					if (this._Roll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRollIdChanging(value);
					this.SendPropertyChanging();
					this._RollId = value;
					this.SendPropertyChanged("RollId");
					this.OnRollIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roll_CuttingInstructionDetailRoll", Storage="_Roll", ThisKey="RollId", OtherKey="Id", IsForeignKey=true)]
		public Roll Roll
		{
			get
			{
				return this._Roll.Entity;
			}
			set
			{
				Roll previousValue = this._Roll.Entity;
				if (((previousValue != value) 
							|| (this._Roll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roll.Entity = null;
						previousValue.CuttingInstructionDetailRolls.Remove(this);
					}
					this._Roll.Entity = value;
					if ((value != null))
					{
						value.CuttingInstructionDetailRolls.Add(this);
						this._RollId = value.Id;
					}
					else
					{
						this._RollId = default(int);
					}
					this.SendPropertyChanged("Roll");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuttingInstructionDetail_CuttingInstructionDetailRoll", Storage="_CuttingInstructionDetail", ThisKey="CuttingInstructionDetailId", OtherKey="Id", IsForeignKey=true)]
		public CuttingInstructionDetail CuttingInstructionDetail
		{
			get
			{
				return this._CuttingInstructionDetail.Entity;
			}
			set
			{
				CuttingInstructionDetail previousValue = this._CuttingInstructionDetail.Entity;
				if (((previousValue != value) 
							|| (this._CuttingInstructionDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CuttingInstructionDetail.Entity = null;
						previousValue.CuttingInstructionDetailRolls.Remove(this);
					}
					this._CuttingInstructionDetail.Entity = value;
					if ((value != null))
					{
						value.CuttingInstructionDetailRolls.Add(this);
						this._CuttingInstructionDetailId = value.Id;
					}
					else
					{
						this._CuttingInstructionDetailId = default(int);
					}
					this.SendPropertyChanged("CuttingInstructionDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rolls")]
	public partial class Roll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FabricId;
		
		private int _Length;
		
		private bool _Used;
		
		private EntitySet<CuttingInstructionDetailRoll> _CuttingInstructionDetailRolls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFabricIdChanging(int value);
    partial void OnFabricIdChanged();
    partial void OnLengthChanging(int value);
    partial void OnLengthChanged();
    partial void OnUsedChanging(bool value);
    partial void OnUsedChanged();
    #endregion
		
		public Roll()
		{
			this._CuttingInstructionDetailRolls = new EntitySet<CuttingInstructionDetailRoll>(new Action<CuttingInstructionDetailRoll>(this.attach_CuttingInstructionDetailRolls), new Action<CuttingInstructionDetailRoll>(this.detach_CuttingInstructionDetailRolls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FabricId", DbType="Int NOT NULL")]
		public int FabricId
		{
			get
			{
				return this._FabricId;
			}
			set
			{
				if ((this._FabricId != value))
				{
					this.OnFabricIdChanging(value);
					this.SendPropertyChanging();
					this._FabricId = value;
					this.SendPropertyChanged("FabricId");
					this.OnFabricIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int NOT NULL")]
		public int Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Used", DbType="Bit NOT NULL")]
		public bool Used
		{
			get
			{
				return this._Used;
			}
			set
			{
				if ((this._Used != value))
				{
					this.OnUsedChanging(value);
					this.SendPropertyChanging();
					this._Used = value;
					this.SendPropertyChanged("Used");
					this.OnUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roll_CuttingInstructionDetailRoll", Storage="_CuttingInstructionDetailRolls", ThisKey="Id", OtherKey="RollId")]
		public EntitySet<CuttingInstructionDetailRoll> CuttingInstructionDetailRolls
		{
			get
			{
				return this._CuttingInstructionDetailRolls;
			}
			set
			{
				this._CuttingInstructionDetailRolls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CuttingInstructionDetailRolls(CuttingInstructionDetailRoll entity)
		{
			this.SendPropertyChanging();
			entity.Roll = this;
		}
		
		private void detach_CuttingInstructionDetailRolls(CuttingInstructionDetailRoll entity)
		{
			this.SendPropertyChanging();
			entity.Roll = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Markers")]
	public partial class Marker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MarkerCatId;
		
		private System.Nullable<decimal> _Length;
		
		private System.Nullable<decimal> _PercentWaste;
		
		private EntitySet<MarkerDetail> _MarkerDetails;
		
		private EntitySet<MarkerCategory> _MarkerCategories;
		
		private EntitySet<CuttingInstruction> _CuttingInstructions;
		
		private EntityRef<MarkerCategory> _MarkerCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMarkerCatIdChanging(int value);
    partial void OnMarkerCatIdChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
    partial void OnPercentWasteChanging(System.Nullable<decimal> value);
    partial void OnPercentWasteChanged();
    #endregion
		
		public Marker()
		{
			this._MarkerDetails = new EntitySet<MarkerDetail>(new Action<MarkerDetail>(this.attach_MarkerDetails), new Action<MarkerDetail>(this.detach_MarkerDetails));
			this._MarkerCategories = new EntitySet<MarkerCategory>(new Action<MarkerCategory>(this.attach_MarkerCategories), new Action<MarkerCategory>(this.detach_MarkerCategories));
			this._CuttingInstructions = new EntitySet<CuttingInstruction>(new Action<CuttingInstruction>(this.attach_CuttingInstructions), new Action<CuttingInstruction>(this.detach_CuttingInstructions));
			this._MarkerCategory = default(EntityRef<MarkerCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerCatId", DbType="Int NOT NULL")]
		public int MarkerCatId
		{
			get
			{
				return this._MarkerCatId;
			}
			set
			{
				if ((this._MarkerCatId != value))
				{
					if (this._MarkerCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkerCatIdChanging(value);
					this.SendPropertyChanging();
					this._MarkerCatId = value;
					this.SendPropertyChanged("MarkerCatId");
					this.OnMarkerCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentWaste", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> PercentWaste
		{
			get
			{
				return this._PercentWaste;
			}
			set
			{
				if ((this._PercentWaste != value))
				{
					this.OnPercentWasteChanging(value);
					this.SendPropertyChanging();
					this._PercentWaste = value;
					this.SendPropertyChanged("PercentWaste");
					this.OnPercentWasteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_MarkerDetail", Storage="_MarkerDetails", ThisKey="Id", OtherKey="MarkerId")]
		public EntitySet<MarkerDetail> MarkerDetails
		{
			get
			{
				return this._MarkerDetails;
			}
			set
			{
				this._MarkerDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_MarkerCategory", Storage="_MarkerCategories", ThisKey="Id", OtherKey="DefaltMarkerId")]
		public EntitySet<MarkerCategory> MarkerCategories
		{
			get
			{
				return this._MarkerCategories;
			}
			set
			{
				this._MarkerCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_CuttingInstruction", Storage="_CuttingInstructions", ThisKey="Id", OtherKey="MarkerId")]
		public EntitySet<CuttingInstruction> CuttingInstructions
		{
			get
			{
				return this._CuttingInstructions;
			}
			set
			{
				this._CuttingInstructions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MarkerCategory_Marker", Storage="_MarkerCategory", ThisKey="MarkerCatId", OtherKey="Id", IsForeignKey=true)]
		public MarkerCategory MarkerCategory
		{
			get
			{
				return this._MarkerCategory.Entity;
			}
			set
			{
				MarkerCategory previousValue = this._MarkerCategory.Entity;
				if (((previousValue != value) 
							|| (this._MarkerCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MarkerCategory.Entity = null;
						previousValue.Markers.Remove(this);
					}
					this._MarkerCategory.Entity = value;
					if ((value != null))
					{
						value.Markers.Add(this);
						this._MarkerCatId = value.Id;
					}
					else
					{
						this._MarkerCatId = default(int);
					}
					this.SendPropertyChanged("MarkerCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MarkerDetails(MarkerDetail entity)
		{
			this.SendPropertyChanging();
			entity.Marker = this;
		}
		
		private void detach_MarkerDetails(MarkerDetail entity)
		{
			this.SendPropertyChanging();
			entity.Marker = null;
		}
		
		private void attach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Marker = this;
		}
		
		private void detach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Marker = null;
		}
		
		private void attach_CuttingInstructions(CuttingInstruction entity)
		{
			this.SendPropertyChanging();
			entity.Marker = this;
		}
		
		private void detach_CuttingInstructions(CuttingInstruction entity)
		{
			this.SendPropertyChanging();
			entity.Marker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MarkerDetails")]
	public partial class MarkerDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MarkerId;
		
		private int _SizeId;
		
		private int _AmountPerLayer;
		
		private EntityRef<Size> _Size;
		
		private EntityRef<Marker> _Marker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMarkerIdChanging(int value);
    partial void OnMarkerIdChanged();
    partial void OnSizeIdChanging(int value);
    partial void OnSizeIdChanged();
    partial void OnAmountPerLayerChanging(int value);
    partial void OnAmountPerLayerChanged();
    #endregion
		
		public MarkerDetail()
		{
			this._Size = default(EntityRef<Size>);
			this._Marker = default(EntityRef<Marker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerId", DbType="Int NOT NULL")]
		public int MarkerId
		{
			get
			{
				return this._MarkerId;
			}
			set
			{
				if ((this._MarkerId != value))
				{
					if (this._Marker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkerIdChanging(value);
					this.SendPropertyChanging();
					this._MarkerId = value;
					this.SendPropertyChanged("MarkerId");
					this.OnMarkerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeId", DbType="Int NOT NULL")]
		public int SizeId
		{
			get
			{
				return this._SizeId;
			}
			set
			{
				if ((this._SizeId != value))
				{
					if (this._Size.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSizeIdChanging(value);
					this.SendPropertyChanging();
					this._SizeId = value;
					this.SendPropertyChanged("SizeId");
					this.OnSizeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPerLayer", DbType="Int NOT NULL")]
		public int AmountPerLayer
		{
			get
			{
				return this._AmountPerLayer;
			}
			set
			{
				if ((this._AmountPerLayer != value))
				{
					this.OnAmountPerLayerChanging(value);
					this.SendPropertyChanging();
					this._AmountPerLayer = value;
					this.SendPropertyChanged("AmountPerLayer");
					this.OnAmountPerLayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_MarkerDetail", Storage="_Size", ThisKey="SizeId", OtherKey="Id", IsForeignKey=true)]
		public Size Size
		{
			get
			{
				return this._Size.Entity;
			}
			set
			{
				Size previousValue = this._Size.Entity;
				if (((previousValue != value) 
							|| (this._Size.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Size.Entity = null;
						previousValue.MarkerDetails.Remove(this);
					}
					this._Size.Entity = value;
					if ((value != null))
					{
						value.MarkerDetails.Add(this);
						this._SizeId = value.Id;
					}
					else
					{
						this._SizeId = default(int);
					}
					this.SendPropertyChanged("Size");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_MarkerDetail", Storage="_Marker", ThisKey="MarkerId", OtherKey="Id", IsForeignKey=true)]
		public Marker Marker
		{
			get
			{
				return this._Marker.Entity;
			}
			set
			{
				Marker previousValue = this._Marker.Entity;
				if (((previousValue != value) 
							|| (this._Marker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marker.Entity = null;
						previousValue.MarkerDetails.Remove(this);
					}
					this._Marker.Entity = value;
					if ((value != null))
					{
						value.MarkerDetails.Add(this);
						this._MarkerId = value.Id;
					}
					else
					{
						this._MarkerId = default(int);
					}
					this.SendPropertyChanged("Marker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CuttingInstructionDetails")]
	public partial class CuttingInstructionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FabricId;
		
		private int _Layers;
		
		private int _CuttingInstructionId;
		
		private Packaging _Packaging;
		
		private EntitySet<CuttingInstructionDetailRoll> _CuttingInstructionDetailRolls;
		
		private EntitySet<CuttingInstructionItem> _CuttingInstructionItems;
		
		private EntityRef<Fabric> _Fabric;
		
		private EntityRef<CuttingInstruction> _CuttingInstruction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFabricIdChanging(int value);
    partial void OnFabricIdChanged();
    partial void OnLayersChanging(int value);
    partial void OnLayersChanged();
    partial void OnCuttingInstructionIdChanging(int value);
    partial void OnCuttingInstructionIdChanged();
    partial void OnPackagingChanging(Packaging value);
    partial void OnPackagingChanged();
    #endregion
		
		public CuttingInstructionDetail()
		{
			this._CuttingInstructionDetailRolls = new EntitySet<CuttingInstructionDetailRoll>(new Action<CuttingInstructionDetailRoll>(this.attach_CuttingInstructionDetailRolls), new Action<CuttingInstructionDetailRoll>(this.detach_CuttingInstructionDetailRolls));
			this._CuttingInstructionItems = new EntitySet<CuttingInstructionItem>(new Action<CuttingInstructionItem>(this.attach_CuttingInstructionItems), new Action<CuttingInstructionItem>(this.detach_CuttingInstructionItems));
			this._Fabric = default(EntityRef<Fabric>);
			this._CuttingInstruction = default(EntityRef<CuttingInstruction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FabricId", DbType="Int NOT NULL")]
		public int FabricId
		{
			get
			{
				return this._FabricId;
			}
			set
			{
				if ((this._FabricId != value))
				{
					if (this._Fabric.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFabricIdChanging(value);
					this.SendPropertyChanging();
					this._FabricId = value;
					this.SendPropertyChanged("FabricId");
					this.OnFabricIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Layers", DbType="Int NOT NULL")]
		public int Layers
		{
			get
			{
				return this._Layers;
			}
			set
			{
				if ((this._Layers != value))
				{
					this.OnLayersChanging(value);
					this.SendPropertyChanging();
					this._Layers = value;
					this.SendPropertyChanged("Layers");
					this.OnLayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CuttingInstructionId", DbType="Int NOT NULL")]
		public int CuttingInstructionId
		{
			get
			{
				return this._CuttingInstructionId;
			}
			set
			{
				if ((this._CuttingInstructionId != value))
				{
					if (this._CuttingInstruction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCuttingInstructionIdChanging(value);
					this.SendPropertyChanging();
					this._CuttingInstructionId = value;
					this.SendPropertyChanged("CuttingInstructionId");
					this.OnCuttingInstructionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Packaging", DbType="Int NOT NULL", CanBeNull=false)]
		public Packaging Packaging
		{
			get
			{
				return this._Packaging;
			}
			set
			{
				if ((this._Packaging != value))
				{
					this.OnPackagingChanging(value);
					this.SendPropertyChanging();
					this._Packaging = value;
					this.SendPropertyChanged("Packaging");
					this.OnPackagingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuttingInstructionDetail_CuttingInstructionDetailRoll", Storage="_CuttingInstructionDetailRolls", ThisKey="Id", OtherKey="CuttingInstructionDetailId")]
		public EntitySet<CuttingInstructionDetailRoll> CuttingInstructionDetailRolls
		{
			get
			{
				return this._CuttingInstructionDetailRolls;
			}
			set
			{
				this._CuttingInstructionDetailRolls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuttingInstructionDetail_CuttingInstructionItem", Storage="_CuttingInstructionItems", ThisKey="Id", OtherKey="CuttingInstructionDetailsId")]
		public EntitySet<CuttingInstructionItem> CuttingInstructionItems
		{
			get
			{
				return this._CuttingInstructionItems;
			}
			set
			{
				this._CuttingInstructionItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fabric_CuttingInstructionDetail", Storage="_Fabric", ThisKey="FabricId", OtherKey="Id", IsForeignKey=true)]
		public Fabric Fabric
		{
			get
			{
				return this._Fabric.Entity;
			}
			set
			{
				Fabric previousValue = this._Fabric.Entity;
				if (((previousValue != value) 
							|| (this._Fabric.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fabric.Entity = null;
						previousValue.CuttingInstructionDetails.Remove(this);
					}
					this._Fabric.Entity = value;
					if ((value != null))
					{
						value.CuttingInstructionDetails.Add(this);
						this._FabricId = value.Id;
					}
					else
					{
						this._FabricId = default(int);
					}
					this.SendPropertyChanged("Fabric");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuttingInstruction_CuttingInstructionDetail", Storage="_CuttingInstruction", ThisKey="CuttingInstructionId", OtherKey="Id", IsForeignKey=true)]
		public CuttingInstruction CuttingInstruction
		{
			get
			{
				return this._CuttingInstruction.Entity;
			}
			set
			{
				CuttingInstruction previousValue = this._CuttingInstruction.Entity;
				if (((previousValue != value) 
							|| (this._CuttingInstruction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CuttingInstruction.Entity = null;
						previousValue.CuttingInstructionDetails.Remove(this);
					}
					this._CuttingInstruction.Entity = value;
					if ((value != null))
					{
						value.CuttingInstructionDetails.Add(this);
						this._CuttingInstructionId = value.Id;
					}
					else
					{
						this._CuttingInstructionId = default(int);
					}
					this.SendPropertyChanged("CuttingInstruction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CuttingInstructionDetailRolls(CuttingInstructionDetailRoll entity)
		{
			this.SendPropertyChanging();
			entity.CuttingInstructionDetail = this;
		}
		
		private void detach_CuttingInstructionDetailRolls(CuttingInstructionDetailRoll entity)
		{
			this.SendPropertyChanging();
			entity.CuttingInstructionDetail = null;
		}
		
		private void attach_CuttingInstructionItems(CuttingInstructionItem entity)
		{
			this.SendPropertyChanging();
			entity.CuttingInstructionDetail = this;
		}
		
		private void detach_CuttingInstructionItems(CuttingInstructionItem entity)
		{
			this.SendPropertyChanging();
			entity.CuttingInstructionDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CuttingInstructionItems")]
	public partial class CuttingInstructionItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ItemId;
		
		private int _Quantity;
		
		private int _CuttingInstructionDetailsId;
		
		private Packaging _Packaging;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<CuttingInstructionDetail> _CuttingInstructionDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnCuttingInstructionDetailsIdChanging(int value);
    partial void OnCuttingInstructionDetailsIdChanged();
    partial void OnPackagingChanging(Packaging value);
    partial void OnPackagingChanged();
    #endregion
		
		public CuttingInstructionItem()
		{
			this._Item = default(EntityRef<Item>);
			this._CuttingInstructionDetail = default(EntityRef<CuttingInstructionDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CuttingInstructionDetailsId", DbType="Int NOT NULL")]
		public int CuttingInstructionDetailsId
		{
			get
			{
				return this._CuttingInstructionDetailsId;
			}
			set
			{
				if ((this._CuttingInstructionDetailsId != value))
				{
					if (this._CuttingInstructionDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCuttingInstructionDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._CuttingInstructionDetailsId = value;
					this.SendPropertyChanged("CuttingInstructionDetailsId");
					this.OnCuttingInstructionDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Packaging", DbType="Int NOT NULL", CanBeNull=false)]
		public Packaging Packaging
		{
			get
			{
				return this._Packaging;
			}
			set
			{
				if ((this._Packaging != value))
				{
					this.OnPackagingChanging(value);
					this.SendPropertyChanging();
					this._Packaging = value;
					this.SendPropertyChanged("Packaging");
					this.OnPackagingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_CuttingInstructionItem", Storage="_Item", ThisKey="ItemId", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.CuttingInstructionItems.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.CuttingInstructionItems.Add(this);
						this._ItemId = value.Id;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuttingInstructionDetail_CuttingInstructionItem", Storage="_CuttingInstructionDetail", ThisKey="CuttingInstructionDetailsId", OtherKey="Id", IsForeignKey=true)]
		public CuttingInstructionDetail CuttingInstructionDetail
		{
			get
			{
				return this._CuttingInstructionDetail.Entity;
			}
			set
			{
				CuttingInstructionDetail previousValue = this._CuttingInstructionDetail.Entity;
				if (((previousValue != value) 
							|| (this._CuttingInstructionDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CuttingInstructionDetail.Entity = null;
						previousValue.CuttingInstructionItems.Remove(this);
					}
					this._CuttingInstructionDetail.Entity = value;
					if ((value != null))
					{
						value.CuttingInstructionItems.Add(this);
						this._CuttingInstructionDetailsId = value.Id;
					}
					else
					{
						this._CuttingInstructionDetailsId = default(int);
					}
					this.SendPropertyChanged("CuttingInstructionDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductionCatergories")]
	public partial class ProductionCatergory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<PlannedProduction> _PlannedProductions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProductionCatergory()
		{
			this._PlannedProductions = new EntitySet<PlannedProduction>(new Action<PlannedProduction>(this.attach_PlannedProductions), new Action<PlannedProduction>(this.detach_PlannedProductions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductionCatergory_PlannedProduction", Storage="_PlannedProductions", ThisKey="Id", OtherKey="ProductionCatergoryId")]
		public EntitySet<PlannedProduction> PlannedProductions
		{
			get
			{
				return this._PlannedProductions;
			}
			set
			{
				this._PlannedProductions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlannedProductions(PlannedProduction entity)
		{
			this.SendPropertyChanging();
			entity.ProductionCatergory = this;
		}
		
		private void detach_PlannedProductions(PlannedProduction entity)
		{
			this.SendPropertyChanging();
			entity.ProductionCatergory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MarkerCategories")]
	public partial class MarkerCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _DepartmentId;
		
		private int _BodyStyleId;
		
		private int _SleeveId;
		
		private System.Nullable<int> _DefaltMarkerId;
		
		private EntitySet<Marker> _Markers;
		
		private EntityRef<Marker> _Marker;
		
		private EntityRef<BodyStyle> _BodyStyle;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Sleeve> _Sleeve;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnBodyStyleIdChanging(int value);
    partial void OnBodyStyleIdChanged();
    partial void OnSleeveIdChanging(int value);
    partial void OnSleeveIdChanged();
    partial void OnDefaltMarkerIdChanging(System.Nullable<int> value);
    partial void OnDefaltMarkerIdChanged();
    #endregion
		
		public MarkerCategory()
		{
			this._Markers = new EntitySet<Marker>(new Action<Marker>(this.attach_Markers), new Action<Marker>(this.detach_Markers));
			this._Marker = default(EntityRef<Marker>);
			this._BodyStyle = default(EntityRef<BodyStyle>);
			this._Department = default(EntityRef<Department>);
			this._Sleeve = default(EntityRef<Sleeve>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyStyleId", DbType="Int NOT NULL")]
		public int BodyStyleId
		{
			get
			{
				return this._BodyStyleId;
			}
			set
			{
				if ((this._BodyStyleId != value))
				{
					if (this._BodyStyle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBodyStyleIdChanging(value);
					this.SendPropertyChanging();
					this._BodyStyleId = value;
					this.SendPropertyChanged("BodyStyleId");
					this.OnBodyStyleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SleeveId", DbType="Int NOT NULL")]
		public int SleeveId
		{
			get
			{
				return this._SleeveId;
			}
			set
			{
				if ((this._SleeveId != value))
				{
					if (this._Sleeve.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSleeveIdChanging(value);
					this.SendPropertyChanging();
					this._SleeveId = value;
					this.SendPropertyChanged("SleeveId");
					this.OnSleeveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaltMarkerId", DbType="Int")]
		public System.Nullable<int> DefaltMarkerId
		{
			get
			{
				return this._DefaltMarkerId;
			}
			set
			{
				if ((this._DefaltMarkerId != value))
				{
					if (this._Marker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaltMarkerIdChanging(value);
					this.SendPropertyChanging();
					this._DefaltMarkerId = value;
					this.SendPropertyChanged("DefaltMarkerId");
					this.OnDefaltMarkerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MarkerCategory_Marker", Storage="_Markers", ThisKey="Id", OtherKey="MarkerCatId")]
		public EntitySet<Marker> Markers
		{
			get
			{
				return this._Markers;
			}
			set
			{
				this._Markers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_MarkerCategory", Storage="_Marker", ThisKey="DefaltMarkerId", OtherKey="Id", IsForeignKey=true)]
		public Marker Marker
		{
			get
			{
				return this._Marker.Entity;
			}
			set
			{
				Marker previousValue = this._Marker.Entity;
				if (((previousValue != value) 
							|| (this._Marker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marker.Entity = null;
						previousValue.MarkerCategories.Remove(this);
					}
					this._Marker.Entity = value;
					if ((value != null))
					{
						value.MarkerCategories.Add(this);
						this._DefaltMarkerId = value.Id;
					}
					else
					{
						this._DefaltMarkerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Marker");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyStyle_MarkerCategory", Storage="_BodyStyle", ThisKey="BodyStyleId", OtherKey="Id", IsForeignKey=true)]
		public BodyStyle BodyStyle
		{
			get
			{
				return this._BodyStyle.Entity;
			}
			set
			{
				BodyStyle previousValue = this._BodyStyle.Entity;
				if (((previousValue != value) 
							|| (this._BodyStyle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BodyStyle.Entity = null;
						previousValue.MarkerCategories.Remove(this);
					}
					this._BodyStyle.Entity = value;
					if ((value != null))
					{
						value.MarkerCategories.Add(this);
						this._BodyStyleId = value.Id;
					}
					else
					{
						this._BodyStyleId = default(int);
					}
					this.SendPropertyChanged("BodyStyle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_MarkerCategory", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.MarkerCategories.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.MarkerCategories.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sleeve_MarkerCategory", Storage="_Sleeve", ThisKey="SleeveId", OtherKey="Id", IsForeignKey=true)]
		public Sleeve Sleeve
		{
			get
			{
				return this._Sleeve.Entity;
			}
			set
			{
				Sleeve previousValue = this._Sleeve.Entity;
				if (((previousValue != value) 
							|| (this._Sleeve.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sleeve.Entity = null;
						previousValue.MarkerCategories.Remove(this);
					}
					this._Sleeve.Entity = value;
					if ((value != null))
					{
						value.MarkerCategories.Add(this);
						this._SleeveId = value.Id;
					}
					else
					{
						this._SleeveId = default(int);
					}
					this.SendPropertyChanged("Sleeve");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.MarkerCategory = this;
		}
		
		private void detach_Markers(Marker entity)
		{
			this.SendPropertyChanging();
			entity.MarkerCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlannedProductions")]
	public partial class PlannedProduction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProductionCatergoryId;
		
		private int _ProductionCatYear;
		
		private EntitySet<PlannedProductionDetail> _PlannedProductionDetails;
		
		private EntitySet<CuttingInstruction> _CuttingInstructions;
		
		private EntityRef<ProductionCatergory> _ProductionCatergory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProductionCatergoryIdChanging(int value);
    partial void OnProductionCatergoryIdChanged();
    partial void OnProductionCatYearChanging(int value);
    partial void OnProductionCatYearChanged();
    #endregion
		
		public PlannedProduction()
		{
			this._PlannedProductionDetails = new EntitySet<PlannedProductionDetail>(new Action<PlannedProductionDetail>(this.attach_PlannedProductionDetails), new Action<PlannedProductionDetail>(this.detach_PlannedProductionDetails));
			this._CuttingInstructions = new EntitySet<CuttingInstruction>(new Action<CuttingInstruction>(this.attach_CuttingInstructions), new Action<CuttingInstruction>(this.detach_CuttingInstructions));
			this._ProductionCatergory = default(EntityRef<ProductionCatergory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionCatergoryId", DbType="Int NOT NULL")]
		public int ProductionCatergoryId
		{
			get
			{
				return this._ProductionCatergoryId;
			}
			set
			{
				if ((this._ProductionCatergoryId != value))
				{
					if (this._ProductionCatergory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductionCatergoryIdChanging(value);
					this.SendPropertyChanging();
					this._ProductionCatergoryId = value;
					this.SendPropertyChanged("ProductionCatergoryId");
					this.OnProductionCatergoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionCatYear", DbType="Int NOT NULL")]
		public int ProductionCatYear
		{
			get
			{
				return this._ProductionCatYear;
			}
			set
			{
				if ((this._ProductionCatYear != value))
				{
					this.OnProductionCatYearChanging(value);
					this.SendPropertyChanging();
					this._ProductionCatYear = value;
					this.SendPropertyChanged("ProductionCatYear");
					this.OnProductionCatYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlannedProduction_PlannedProductionDetail", Storage="_PlannedProductionDetails", ThisKey="Id", OtherKey="PlannedProductionId")]
		public EntitySet<PlannedProductionDetail> PlannedProductionDetails
		{
			get
			{
				return this._PlannedProductionDetails;
			}
			set
			{
				this._PlannedProductionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlannedProduction_CuttingInstruction", Storage="_CuttingInstructions", ThisKey="Id", OtherKey="PlannedProductionId")]
		public EntitySet<CuttingInstruction> CuttingInstructions
		{
			get
			{
				return this._CuttingInstructions;
			}
			set
			{
				this._CuttingInstructions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductionCatergory_PlannedProduction", Storage="_ProductionCatergory", ThisKey="ProductionCatergoryId", OtherKey="Id", IsForeignKey=true)]
		public ProductionCatergory ProductionCatergory
		{
			get
			{
				return this._ProductionCatergory.Entity;
			}
			set
			{
				ProductionCatergory previousValue = this._ProductionCatergory.Entity;
				if (((previousValue != value) 
							|| (this._ProductionCatergory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductionCatergory.Entity = null;
						previousValue.PlannedProductions.Remove(this);
					}
					this._ProductionCatergory.Entity = value;
					if ((value != null))
					{
						value.PlannedProductions.Add(this);
						this._ProductionCatergoryId = value.Id;
					}
					else
					{
						this._ProductionCatergoryId = default(int);
					}
					this.SendPropertyChanged("ProductionCatergory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlannedProductionDetails(PlannedProductionDetail entity)
		{
			this.SendPropertyChanging();
			entity.PlannedProduction = this;
		}
		
		private void detach_PlannedProductionDetails(PlannedProductionDetail entity)
		{
			this.SendPropertyChanging();
			entity.PlannedProduction = null;
		}
		
		private void attach_CuttingInstructions(CuttingInstruction entity)
		{
			this.SendPropertyChanging();
			entity.PlannedProduction = this;
		}
		
		private void detach_CuttingInstructions(CuttingInstruction entity)
		{
			this.SendPropertyChanging();
			entity.PlannedProduction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlannedProductionDetails")]
	public partial class PlannedProductionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ItemId;
		
		private int _Quantity;
		
		private int _PlannedProductionId;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<PlannedProduction> _PlannedProduction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPlannedProductionIdChanging(int value);
    partial void OnPlannedProductionIdChanged();
    #endregion
		
		public PlannedProductionDetail()
		{
			this._Item = default(EntityRef<Item>);
			this._PlannedProduction = default(EntityRef<PlannedProduction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlannedProductionId", DbType="Int NOT NULL")]
		public int PlannedProductionId
		{
			get
			{
				return this._PlannedProductionId;
			}
			set
			{
				if ((this._PlannedProductionId != value))
				{
					if (this._PlannedProduction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlannedProductionIdChanging(value);
					this.SendPropertyChanging();
					this._PlannedProductionId = value;
					this.SendPropertyChanged("PlannedProductionId");
					this.OnPlannedProductionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_PlannedProductionDetail", Storage="_Item", ThisKey="ItemId", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.PlannedProductionDetails.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.PlannedProductionDetails.Add(this);
						this._ItemId = value.Id;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlannedProduction_PlannedProductionDetail", Storage="_PlannedProduction", ThisKey="PlannedProductionId", OtherKey="Id", IsForeignKey=true)]
		public PlannedProduction PlannedProduction
		{
			get
			{
				return this._PlannedProduction.Entity;
			}
			set
			{
				PlannedProduction previousValue = this._PlannedProduction.Entity;
				if (((previousValue != value) 
							|| (this._PlannedProduction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlannedProduction.Entity = null;
						previousValue.PlannedProductionDetails.Remove(this);
					}
					this._PlannedProduction.Entity = value;
					if ((value != null))
					{
						value.PlannedProductionDetails.Add(this);
						this._PlannedProductionId = value.Id;
					}
					else
					{
						this._PlannedProductionId = default(int);
					}
					this.SendPropertyChanged("PlannedProduction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CuttingInstructions")]
	public partial class CuttingInstruction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProductionId;
		
		private int _LotNumber;
		
		private string _MarkerText;
		
		private int _MarkerId;
		
		private System.Nullable<int> _PlannedProductionId;
		
		private bool _Completed;
		
		private EntitySet<ReceivingItemsTransaction> _ReceivingItemsTransactions;
		
		private EntitySet<CuttingInstructionSize> _CuttingInstructionSizes;
		
		private EntitySet<CuttingInstructionDetail> _CuttingInstructionDetails;
		
		private EntityRef<Marker> _Marker;
		
		private EntityRef<PlannedProduction> _PlannedProduction;
		
		private EntityRef<Production> _Production;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProductionIdChanging(int value);
    partial void OnProductionIdChanged();
    partial void OnLotNumberChanging(int value);
    partial void OnLotNumberChanged();
    partial void OnMarkerTextChanging(string value);
    partial void OnMarkerTextChanged();
    partial void OnMarkerIdChanging(int value);
    partial void OnMarkerIdChanged();
    partial void OnPlannedProductionIdChanging(System.Nullable<int> value);
    partial void OnPlannedProductionIdChanged();
    partial void OnCompletedChanging(bool value);
    partial void OnCompletedChanged();
    #endregion
		
		public CuttingInstruction()
		{
			this._ReceivingItemsTransactions = new EntitySet<ReceivingItemsTransaction>(new Action<ReceivingItemsTransaction>(this.attach_ReceivingItemsTransactions), new Action<ReceivingItemsTransaction>(this.detach_ReceivingItemsTransactions));
			this._CuttingInstructionSizes = new EntitySet<CuttingInstructionSize>(new Action<CuttingInstructionSize>(this.attach_CuttingInstructionSizes), new Action<CuttingInstructionSize>(this.detach_CuttingInstructionSizes));
			this._CuttingInstructionDetails = new EntitySet<CuttingInstructionDetail>(new Action<CuttingInstructionDetail>(this.attach_CuttingInstructionDetails), new Action<CuttingInstructionDetail>(this.detach_CuttingInstructionDetails));
			this._Marker = default(EntityRef<Marker>);
			this._PlannedProduction = default(EntityRef<PlannedProduction>);
			this._Production = default(EntityRef<Production>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionId", DbType="Int NOT NULL")]
		public int ProductionId
		{
			get
			{
				return this._ProductionId;
			}
			set
			{
				if ((this._ProductionId != value))
				{
					if (this._Production.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductionIdChanging(value);
					this.SendPropertyChanging();
					this._ProductionId = value;
					this.SendPropertyChanged("ProductionId");
					this.OnProductionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LotNumber", DbType="Int NOT NULL")]
		public int LotNumber
		{
			get
			{
				return this._LotNumber;
			}
			set
			{
				if ((this._LotNumber != value))
				{
					this.OnLotNumberChanging(value);
					this.SendPropertyChanging();
					this._LotNumber = value;
					this.SendPropertyChanged("LotNumber");
					this.OnLotNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerText", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MarkerText
		{
			get
			{
				return this._MarkerText;
			}
			set
			{
				if ((this._MarkerText != value))
				{
					this.OnMarkerTextChanging(value);
					this.SendPropertyChanging();
					this._MarkerText = value;
					this.SendPropertyChanged("MarkerText");
					this.OnMarkerTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerId", DbType="Int NOT NULL")]
		public int MarkerId
		{
			get
			{
				return this._MarkerId;
			}
			set
			{
				if ((this._MarkerId != value))
				{
					if (this._Marker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkerIdChanging(value);
					this.SendPropertyChanging();
					this._MarkerId = value;
					this.SendPropertyChanged("MarkerId");
					this.OnMarkerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlannedProductionId", DbType="Int")]
		public System.Nullable<int> PlannedProductionId
		{
			get
			{
				return this._PlannedProductionId;
			}
			set
			{
				if ((this._PlannedProductionId != value))
				{
					if (this._PlannedProduction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlannedProductionIdChanging(value);
					this.SendPropertyChanging();
					this._PlannedProductionId = value;
					this.SendPropertyChanged("PlannedProductionId");
					this.OnPlannedProductionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completed", DbType="Bit NOT NULL")]
		public bool Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this.OnCompletedChanging(value);
					this.SendPropertyChanging();
					this._Completed = value;
					this.SendPropertyChanged("Completed");
					this.OnCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuttingInstruction_ReceivingItemsTransaction", Storage="_ReceivingItemsTransactions", ThisKey="Id", OtherKey="CuttingInstuctionId")]
		public EntitySet<ReceivingItemsTransaction> ReceivingItemsTransactions
		{
			get
			{
				return this._ReceivingItemsTransactions;
			}
			set
			{
				this._ReceivingItemsTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuttingInstruction_CuttingInstructionSize", Storage="_CuttingInstructionSizes", ThisKey="Id", OtherKey="CuttingInstructId")]
		public EntitySet<CuttingInstructionSize> CuttingInstructionSizes
		{
			get
			{
				return this._CuttingInstructionSizes;
			}
			set
			{
				this._CuttingInstructionSizes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuttingInstruction_CuttingInstructionDetail", Storage="_CuttingInstructionDetails", ThisKey="Id", OtherKey="CuttingInstructionId")]
		public EntitySet<CuttingInstructionDetail> CuttingInstructionDetails
		{
			get
			{
				return this._CuttingInstructionDetails;
			}
			set
			{
				this._CuttingInstructionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marker_CuttingInstruction", Storage="_Marker", ThisKey="MarkerId", OtherKey="Id", IsForeignKey=true)]
		public Marker Marker
		{
			get
			{
				return this._Marker.Entity;
			}
			set
			{
				Marker previousValue = this._Marker.Entity;
				if (((previousValue != value) 
							|| (this._Marker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marker.Entity = null;
						previousValue.CuttingInstructions.Remove(this);
					}
					this._Marker.Entity = value;
					if ((value != null))
					{
						value.CuttingInstructions.Add(this);
						this._MarkerId = value.Id;
					}
					else
					{
						this._MarkerId = default(int);
					}
					this.SendPropertyChanged("Marker");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlannedProduction_CuttingInstruction", Storage="_PlannedProduction", ThisKey="PlannedProductionId", OtherKey="Id", IsForeignKey=true)]
		public PlannedProduction PlannedProduction
		{
			get
			{
				return this._PlannedProduction.Entity;
			}
			set
			{
				PlannedProduction previousValue = this._PlannedProduction.Entity;
				if (((previousValue != value) 
							|| (this._PlannedProduction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlannedProduction.Entity = null;
						previousValue.CuttingInstructions.Remove(this);
					}
					this._PlannedProduction.Entity = value;
					if ((value != null))
					{
						value.CuttingInstructions.Add(this);
						this._PlannedProductionId = value.Id;
					}
					else
					{
						this._PlannedProductionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PlannedProduction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Production_CuttingInstruction", Storage="_Production", ThisKey="ProductionId", OtherKey="Id", IsForeignKey=true)]
		public Production Production
		{
			get
			{
				return this._Production.Entity;
			}
			set
			{
				Production previousValue = this._Production.Entity;
				if (((previousValue != value) 
							|| (this._Production.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Production.Entity = null;
						previousValue.CuttingInstructions.Remove(this);
					}
					this._Production.Entity = value;
					if ((value != null))
					{
						value.CuttingInstructions.Add(this);
						this._ProductionId = value.Id;
					}
					else
					{
						this._ProductionId = default(int);
					}
					this.SendPropertyChanged("Production");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReceivingItemsTransactions(ReceivingItemsTransaction entity)
		{
			this.SendPropertyChanging();
			entity.CuttingInstruction = this;
		}
		
		private void detach_ReceivingItemsTransactions(ReceivingItemsTransaction entity)
		{
			this.SendPropertyChanging();
			entity.CuttingInstruction = null;
		}
		
		private void attach_CuttingInstructionSizes(CuttingInstructionSize entity)
		{
			this.SendPropertyChanging();
			entity.CuttingInstruction = this;
		}
		
		private void detach_CuttingInstructionSizes(CuttingInstructionSize entity)
		{
			this.SendPropertyChanging();
			entity.CuttingInstruction = null;
		}
		
		private void attach_CuttingInstructionDetails(CuttingInstructionDetail entity)
		{
			this.SendPropertyChanging();
			entity.CuttingInstruction = this;
		}
		
		private void detach_CuttingInstructionDetails(CuttingInstructionDetail entity)
		{
			this.SendPropertyChanging();
			entity.CuttingInstruction = null;
		}
	}
	
	public partial class ItemsForBarcodes2Result
	{
		
		private string _Barcode;
		
		private System.Nullable<int> _Id;
		
		private string _SKU;
		
		private string _Departmet;
		
		private string _BodyStyle;
		
		private string _BodyStyleAtt;
		
		private string _Sleeve;
		
		private System.Nullable<int> _ColorId;
		
		private string _Color;
		
		private string _Material;
		
		private string _Size;
		
		private string _SizeDis;
		
		public ItemsForBarcodes2Result()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Barcode", DbType="VarChar(50)")]
		public string Barcode
		{
			get
			{
				return this._Barcode;
			}
			set
			{
				if ((this._Barcode != value))
				{
					this._Barcode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int")]
		public System.Nullable<int> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SKU", DbType="VarChar(50)")]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this._SKU = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Departmet", DbType="VarChar(50)")]
		public string Departmet
		{
			get
			{
				return this._Departmet;
			}
			set
			{
				if ((this._Departmet != value))
				{
					this._Departmet = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyStyle", DbType="VarChar(50)")]
		public string BodyStyle
		{
			get
			{
				return this._BodyStyle;
			}
			set
			{
				if ((this._BodyStyle != value))
				{
					this._BodyStyle = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyStyleAtt", DbType="VarChar(50)")]
		public string BodyStyleAtt
		{
			get
			{
				return this._BodyStyleAtt;
			}
			set
			{
				if ((this._BodyStyleAtt != value))
				{
					this._BodyStyleAtt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sleeve", DbType="VarChar(50)")]
		public string Sleeve
		{
			get
			{
				return this._Sleeve;
			}
			set
			{
				if ((this._Sleeve != value))
				{
					this._Sleeve = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorId", DbType="Int")]
		public System.Nullable<int> ColorId
		{
			get
			{
				return this._ColorId;
			}
			set
			{
				if ((this._ColorId != value))
				{
					this._ColorId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="VarChar(50)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this._Color = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Material", DbType="VarChar(50)")]
		public string Material
		{
			get
			{
				return this._Material;
			}
			set
			{
				if ((this._Material != value))
				{
					this._Material = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="VarChar(50)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this._Size = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeDis", DbType="VarChar(50)")]
		public string SizeDis
		{
			get
			{
				return this._SizeDis;
			}
			set
			{
				if ((this._SizeDis != value))
				{
					this._SizeDis = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
