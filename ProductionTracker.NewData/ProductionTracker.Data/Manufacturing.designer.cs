#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProductionTracker.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ManufacturingDB")]
	public partial class ManufacturingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBodyStyle(BodyStyle instance);
    partial void UpdateBodyStyle(BodyStyle instance);
    partial void DeleteBodyStyle(BodyStyle instance);
    partial void InsertSleeve(Sleeve instance);
    partial void UpdateSleeve(Sleeve instance);
    partial void DeleteSleeve(Sleeve instance);
    partial void InsertColorDetail(ColorDetail instance);
    partial void UpdateColorDetail(ColorDetail instance);
    partial void DeleteColorDetail(ColorDetail instance);
    partial void InsertColor(Color instance);
    partial void UpdateColor(Color instance);
    partial void DeleteColor(Color instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertMarkerCategory(MarkerCategory instance);
    partial void UpdateMarkerCategory(MarkerCategory instance);
    partial void DeleteMarkerCategory(MarkerCategory instance);
    partial void InsertMarkerDetail(MarkerDetail instance);
    partial void UpdateMarkerDetail(MarkerDetail instance);
    partial void DeleteMarkerDetail(MarkerDetail instance);
    partial void InsertMaterial(Material instance);
    partial void UpdateMaterial(Material instance);
    partial void DeleteMaterial(Material instance);
    partial void InsertSize(Size instance);
    partial void UpdateSize(Size instance);
    partial void DeleteSize(Size instance);
    #endregion
		
		public ManufacturingDataContext() : 
				base(global::ProductionTracker.Data.Properties.Settings.Default.ManufacturingDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManufacturingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BodyStyle> BodyStyles
		{
			get
			{
				return this.GetTable<BodyStyle>();
			}
		}
		
		public System.Data.Linq.Table<Sleeve> Sleeves
		{
			get
			{
				return this.GetTable<Sleeve>();
			}
		}
		
		public System.Data.Linq.Table<ColorDetail> ColorDetails
		{
			get
			{
				return this.GetTable<ColorDetail>();
			}
		}
		
		public System.Data.Linq.Table<Color> Colors
		{
			get
			{
				return this.GetTable<Color>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<MarkerCategory> MarkerCategories
		{
			get
			{
				return this.GetTable<MarkerCategory>();
			}
		}
		
		public System.Data.Linq.Table<MarkerDetail> MarkerDetails
		{
			get
			{
				return this.GetTable<MarkerDetail>();
			}
		}
		
		public System.Data.Linq.Table<Material> Materials
		{
			get
			{
				return this.GetTable<Material>();
			}
		}
		
		public System.Data.Linq.Table<Size> Sizes
		{
			get
			{
				return this.GetTable<Size>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BodyStyle")]
	public partial class BodyStyle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<MarkerCategory> _MarkerCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BodyStyle()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._MarkerCategories = new EntitySet<MarkerCategory>(new Action<MarkerCategory>(this.attach_MarkerCategories), new Action<MarkerCategory>(this.detach_MarkerCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyStyle_Item", Storage="_Items", ThisKey="Id", OtherKey="BodyStyleId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyStyle_MarkerCategory", Storage="_MarkerCategories", ThisKey="Id", OtherKey="BodyStyleId")]
		public EntitySet<MarkerCategory> MarkerCategories
		{
			get
			{
				return this._MarkerCategories;
			}
			set
			{
				this._MarkerCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.BodyStyle = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.BodyStyle = null;
		}
		
		private void attach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.BodyStyle = this;
		}
		
		private void detach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.BodyStyle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sleeves")]
	public partial class Sleeve : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<MarkerCategory> _MarkerCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Sleeve()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._MarkerCategories = new EntitySet<MarkerCategory>(new Action<MarkerCategory>(this.attach_MarkerCategories), new Action<MarkerCategory>(this.detach_MarkerCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sleeve_Item", Storage="_Items", ThisKey="Id", OtherKey="SleeveId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sleeve_MarkerCategory", Storage="_MarkerCategories", ThisKey="Id", OtherKey="SleeveId")]
		public EntitySet<MarkerCategory> MarkerCategories
		{
			get
			{
				return this._MarkerCategories;
			}
			set
			{
				this._MarkerCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Sleeve = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Sleeve = null;
		}
		
		private void attach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Sleeve = this;
		}
		
		private void detach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Sleeve = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ColorDetails")]
	public partial class ColorDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ColorId;
		
		private string _Name;
		
		private EntityRef<Color> _Color;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColorIdChanging(int value);
    partial void OnColorIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ColorDetail()
		{
			this._Color = default(EntityRef<Color>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ColorId
		{
			get
			{
				return this._ColorId;
			}
			set
			{
				if ((this._ColorId != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIdChanging(value);
					this.SendPropertyChanging();
					this._ColorId = value;
					this.SendPropertyChanged("ColorId");
					this.OnColorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_ColorDetail", Storage="_Color", ThisKey="ColorId", OtherKey="Id", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.ColorDetails.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.ColorDetails.Add(this);
						this._ColorId = value.Id;
					}
					else
					{
						this._ColorId = default(int);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Colors")]
	public partial class Color : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ColorDetail> _ColorDetails;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Color()
		{
			this._ColorDetails = new EntitySet<ColorDetail>(new Action<ColorDetail>(this.attach_ColorDetails), new Action<ColorDetail>(this.detach_ColorDetails));
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_ColorDetail", Storage="_ColorDetails", ThisKey="Id", OtherKey="ColorId")]
		public EntitySet<ColorDetail> ColorDetails
		{
			get
			{
				return this._ColorDetails;
			}
			set
			{
				this._ColorDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Item", Storage="_Items", ThisKey="Id", OtherKey="ColorId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ColorDetails(ColorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_ColorDetails(ColorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<MarkerCategory> _MarkerCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Department()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._MarkerCategories = new EntitySet<MarkerCategory>(new Action<MarkerCategory>(this.attach_MarkerCategories), new Action<MarkerCategory>(this.detach_MarkerCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Item", Storage="_Items", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_MarkerCategory", Storage="_MarkerCategories", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<MarkerCategory> MarkerCategories
		{
			get
			{
				return this._MarkerCategories;
			}
			set
			{
				this._MarkerCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_MarkerCategories(MarkerCategory entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SKU;
		
		private int _ColorId;
		
		private int _SizeId;
		
		private int _DepartmentId;
		
		private int _MaterialId;
		
		private int _SleeveId;
		
		private int _BodyStyleId;
		
		private string _SizeDescription;
		
		private string _BodyStyleAttributte;
		
		private EntityRef<BodyStyle> _BodyStyle;
		
		private EntityRef<Color> _Color;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Sleeve> _Sleeve;
		
		private EntityRef<Material> _Material;
		
		private EntityRef<Size> _Size;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnColorIdChanging(int value);
    partial void OnColorIdChanged();
    partial void OnSizeIdChanging(int value);
    partial void OnSizeIdChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnMaterialIdChanging(int value);
    partial void OnMaterialIdChanged();
    partial void OnSleeveIdChanging(int value);
    partial void OnSleeveIdChanged();
    partial void OnBodyStyleIdChanging(int value);
    partial void OnBodyStyleIdChanged();
    partial void OnSizeDescriptionChanging(string value);
    partial void OnSizeDescriptionChanged();
    partial void OnBodyStyleAttributteChanging(string value);
    partial void OnBodyStyleAttributteChanged();
    #endregion
		
		public Item()
		{
			this._BodyStyle = default(EntityRef<BodyStyle>);
			this._Color = default(EntityRef<Color>);
			this._Department = default(EntityRef<Department>);
			this._Sleeve = default(EntityRef<Sleeve>);
			this._Material = default(EntityRef<Material>);
			this._Size = default(EntityRef<Size>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SKU", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorId", DbType="Int NOT NULL")]
		public int ColorId
		{
			get
			{
				return this._ColorId;
			}
			set
			{
				if ((this._ColorId != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIdChanging(value);
					this.SendPropertyChanging();
					this._ColorId = value;
					this.SendPropertyChanged("ColorId");
					this.OnColorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeId", DbType="Int NOT NULL")]
		public int SizeId
		{
			get
			{
				return this._SizeId;
			}
			set
			{
				if ((this._SizeId != value))
				{
					if (this._Size.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSizeIdChanging(value);
					this.SendPropertyChanging();
					this._SizeId = value;
					this.SendPropertyChanged("SizeId");
					this.OnSizeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialId", DbType="Int NOT NULL")]
		public int MaterialId
		{
			get
			{
				return this._MaterialId;
			}
			set
			{
				if ((this._MaterialId != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialIdChanging(value);
					this.SendPropertyChanging();
					this._MaterialId = value;
					this.SendPropertyChanged("MaterialId");
					this.OnMaterialIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SleeveId", DbType="Int NOT NULL")]
		public int SleeveId
		{
			get
			{
				return this._SleeveId;
			}
			set
			{
				if ((this._SleeveId != value))
				{
					if (this._Sleeve.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSleeveIdChanging(value);
					this.SendPropertyChanging();
					this._SleeveId = value;
					this.SendPropertyChanged("SleeveId");
					this.OnSleeveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyStyleId", DbType="Int NOT NULL")]
		public int BodyStyleId
		{
			get
			{
				return this._BodyStyleId;
			}
			set
			{
				if ((this._BodyStyleId != value))
				{
					if (this._BodyStyle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBodyStyleIdChanging(value);
					this.SendPropertyChanging();
					this._BodyStyleId = value;
					this.SendPropertyChanged("BodyStyleId");
					this.OnBodyStyleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeDescription", DbType="VarChar(50)")]
		public string SizeDescription
		{
			get
			{
				return this._SizeDescription;
			}
			set
			{
				if ((this._SizeDescription != value))
				{
					this.OnSizeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SizeDescription = value;
					this.SendPropertyChanged("SizeDescription");
					this.OnSizeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyStyleAttributte", DbType="VarChar(50)")]
		public string BodyStyleAttributte
		{
			get
			{
				return this._BodyStyleAttributte;
			}
			set
			{
				if ((this._BodyStyleAttributte != value))
				{
					this.OnBodyStyleAttributteChanging(value);
					this.SendPropertyChanging();
					this._BodyStyleAttributte = value;
					this.SendPropertyChanged("BodyStyleAttributte");
					this.OnBodyStyleAttributteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyStyle_Item", Storage="_BodyStyle", ThisKey="BodyStyleId", OtherKey="Id", IsForeignKey=true)]
		public BodyStyle BodyStyle
		{
			get
			{
				return this._BodyStyle.Entity;
			}
			set
			{
				BodyStyle previousValue = this._BodyStyle.Entity;
				if (((previousValue != value) 
							|| (this._BodyStyle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BodyStyle.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._BodyStyle.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._BodyStyleId = value.Id;
					}
					else
					{
						this._BodyStyleId = default(int);
					}
					this.SendPropertyChanged("BodyStyle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Item", Storage="_Color", ThisKey="ColorId", OtherKey="Id", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._ColorId = value.Id;
					}
					else
					{
						this._ColorId = default(int);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Item", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sleeve_Item", Storage="_Sleeve", ThisKey="SleeveId", OtherKey="Id", IsForeignKey=true)]
		public Sleeve Sleeve
		{
			get
			{
				return this._Sleeve.Entity;
			}
			set
			{
				Sleeve previousValue = this._Sleeve.Entity;
				if (((previousValue != value) 
							|| (this._Sleeve.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sleeve.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Sleeve.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._SleeveId = value.Id;
					}
					else
					{
						this._SleeveId = default(int);
					}
					this.SendPropertyChanged("Sleeve");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Item", Storage="_Material", ThisKey="MaterialId", OtherKey="Id", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._MaterialId = value.Id;
					}
					else
					{
						this._MaterialId = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_Item", Storage="_Size", ThisKey="SizeId", OtherKey="Id", IsForeignKey=true)]
		public Size Size
		{
			get
			{
				return this._Size.Entity;
			}
			set
			{
				Size previousValue = this._Size.Entity;
				if (((previousValue != value) 
							|| (this._Size.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Size.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Size.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._SizeId = value.Id;
					}
					else
					{
						this._SizeId = default(int);
					}
					this.SendPropertyChanged("Size");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MarkerCategories")]
	public partial class MarkerCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _DepartmentId;
		
		private int _BodyStyleId;
		
		private int _SleeveId;
		
		private EntitySet<MarkerDetail> _MarkerDetails;
		
		private EntityRef<BodyStyle> _BodyStyle;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Sleeve> _Sleeve;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnBodyStyleIdChanging(int value);
    partial void OnBodyStyleIdChanged();
    partial void OnSleeveIdChanging(int value);
    partial void OnSleeveIdChanged();
    #endregion
		
		public MarkerCategory()
		{
			this._MarkerDetails = new EntitySet<MarkerDetail>(new Action<MarkerDetail>(this.attach_MarkerDetails), new Action<MarkerDetail>(this.detach_MarkerDetails));
			this._BodyStyle = default(EntityRef<BodyStyle>);
			this._Department = default(EntityRef<Department>);
			this._Sleeve = default(EntityRef<Sleeve>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyStyleId", DbType="Int NOT NULL")]
		public int BodyStyleId
		{
			get
			{
				return this._BodyStyleId;
			}
			set
			{
				if ((this._BodyStyleId != value))
				{
					if (this._BodyStyle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBodyStyleIdChanging(value);
					this.SendPropertyChanging();
					this._BodyStyleId = value;
					this.SendPropertyChanged("BodyStyleId");
					this.OnBodyStyleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SleeveId", DbType="Int NOT NULL")]
		public int SleeveId
		{
			get
			{
				return this._SleeveId;
			}
			set
			{
				if ((this._SleeveId != value))
				{
					if (this._Sleeve.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSleeveIdChanging(value);
					this.SendPropertyChanging();
					this._SleeveId = value;
					this.SendPropertyChanged("SleeveId");
					this.OnSleeveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MarkerCategory_MarkerDetail", Storage="_MarkerDetails", ThisKey="Id", OtherKey="MarkerCatId")]
		public EntitySet<MarkerDetail> MarkerDetails
		{
			get
			{
				return this._MarkerDetails;
			}
			set
			{
				this._MarkerDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BodyStyle_MarkerCategory", Storage="_BodyStyle", ThisKey="BodyStyleId", OtherKey="Id", IsForeignKey=true)]
		public BodyStyle BodyStyle
		{
			get
			{
				return this._BodyStyle.Entity;
			}
			set
			{
				BodyStyle previousValue = this._BodyStyle.Entity;
				if (((previousValue != value) 
							|| (this._BodyStyle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BodyStyle.Entity = null;
						previousValue.MarkerCategories.Remove(this);
					}
					this._BodyStyle.Entity = value;
					if ((value != null))
					{
						value.MarkerCategories.Add(this);
						this._BodyStyleId = value.Id;
					}
					else
					{
						this._BodyStyleId = default(int);
					}
					this.SendPropertyChanged("BodyStyle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_MarkerCategory", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.MarkerCategories.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.MarkerCategories.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sleeve_MarkerCategory", Storage="_Sleeve", ThisKey="SleeveId", OtherKey="Id", IsForeignKey=true)]
		public Sleeve Sleeve
		{
			get
			{
				return this._Sleeve.Entity;
			}
			set
			{
				Sleeve previousValue = this._Sleeve.Entity;
				if (((previousValue != value) 
							|| (this._Sleeve.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sleeve.Entity = null;
						previousValue.MarkerCategories.Remove(this);
					}
					this._Sleeve.Entity = value;
					if ((value != null))
					{
						value.MarkerCategories.Add(this);
						this._SleeveId = value.Id;
					}
					else
					{
						this._SleeveId = default(int);
					}
					this.SendPropertyChanged("Sleeve");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MarkerDetails(MarkerDetail entity)
		{
			this.SendPropertyChanging();
			entity.MarkerCategory = this;
		}
		
		private void detach_MarkerDetails(MarkerDetail entity)
		{
			this.SendPropertyChanging();
			entity.MarkerCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MarkerDetails")]
	public partial class MarkerDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MarkerCatId;
		
		private int _SizeId;
		
		private int _AmountPerLayer;
		
		private EntityRef<MarkerCategory> _MarkerCategory;
		
		private EntityRef<Size> _Size;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMarkerCatIdChanging(int value);
    partial void OnMarkerCatIdChanged();
    partial void OnSizeIdChanging(int value);
    partial void OnSizeIdChanged();
    partial void OnAmountPerLayerChanging(int value);
    partial void OnAmountPerLayerChanged();
    #endregion
		
		public MarkerDetail()
		{
			this._MarkerCategory = default(EntityRef<MarkerCategory>);
			this._Size = default(EntityRef<Size>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerCatId", DbType="Int NOT NULL")]
		public int MarkerCatId
		{
			get
			{
				return this._MarkerCatId;
			}
			set
			{
				if ((this._MarkerCatId != value))
				{
					if (this._MarkerCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkerCatIdChanging(value);
					this.SendPropertyChanging();
					this._MarkerCatId = value;
					this.SendPropertyChanged("MarkerCatId");
					this.OnMarkerCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeId", DbType="Int NOT NULL")]
		public int SizeId
		{
			get
			{
				return this._SizeId;
			}
			set
			{
				if ((this._SizeId != value))
				{
					if (this._Size.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSizeIdChanging(value);
					this.SendPropertyChanging();
					this._SizeId = value;
					this.SendPropertyChanged("SizeId");
					this.OnSizeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPerLayer", DbType="Int NOT NULL")]
		public int AmountPerLayer
		{
			get
			{
				return this._AmountPerLayer;
			}
			set
			{
				if ((this._AmountPerLayer != value))
				{
					this.OnAmountPerLayerChanging(value);
					this.SendPropertyChanging();
					this._AmountPerLayer = value;
					this.SendPropertyChanged("AmountPerLayer");
					this.OnAmountPerLayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MarkerCategory_MarkerDetail", Storage="_MarkerCategory", ThisKey="MarkerCatId", OtherKey="Id", IsForeignKey=true)]
		public MarkerCategory MarkerCategory
		{
			get
			{
				return this._MarkerCategory.Entity;
			}
			set
			{
				MarkerCategory previousValue = this._MarkerCategory.Entity;
				if (((previousValue != value) 
							|| (this._MarkerCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MarkerCategory.Entity = null;
						previousValue.MarkerDetails.Remove(this);
					}
					this._MarkerCategory.Entity = value;
					if ((value != null))
					{
						value.MarkerDetails.Add(this);
						this._MarkerCatId = value.Id;
					}
					else
					{
						this._MarkerCatId = default(int);
					}
					this.SendPropertyChanged("MarkerCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_MarkerDetail", Storage="_Size", ThisKey="SizeId", OtherKey="Id", IsForeignKey=true)]
		public Size Size
		{
			get
			{
				return this._Size.Entity;
			}
			set
			{
				Size previousValue = this._Size.Entity;
				if (((previousValue != value) 
							|| (this._Size.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Size.Entity = null;
						previousValue.MarkerDetails.Remove(this);
					}
					this._Size.Entity = value;
					if ((value != null))
					{
						value.MarkerDetails.Add(this);
						this._SizeId = value.Id;
					}
					else
					{
						this._SizeId = default(int);
					}
					this.SendPropertyChanged("Size");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Materials")]
	public partial class Material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private decimal _PricePerYard;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPricePerYardChanging(decimal value);
    partial void OnPricePerYardChanged();
    #endregion
		
		public Material()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerYard", DbType="Money NOT NULL")]
		public decimal PricePerYard
		{
			get
			{
				return this._PricePerYard;
			}
			set
			{
				if ((this._PricePerYard != value))
				{
					this.OnPricePerYardChanging(value);
					this.SendPropertyChanging();
					this._PricePerYard = value;
					this.SendPropertyChanged("PricePerYard");
					this.OnPricePerYardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Item", Storage="_Items", ThisKey="Id", OtherKey="MaterialId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sizes")]
	public partial class Size : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<MarkerDetail> _MarkerDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Size()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._MarkerDetails = new EntitySet<MarkerDetail>(new Action<MarkerDetail>(this.attach_MarkerDetails), new Action<MarkerDetail>(this.detach_MarkerDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_Item", Storage="_Items", ThisKey="Id", OtherKey="SizeId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_MarkerDetail", Storage="_MarkerDetails", ThisKey="Id", OtherKey="SizeId")]
		public EntitySet<MarkerDetail> MarkerDetails
		{
			get
			{
				return this._MarkerDetails;
			}
			set
			{
				this._MarkerDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Size = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Size = null;
		}
		
		private void attach_MarkerDetails(MarkerDetail entity)
		{
			this.SendPropertyChanging();
			entity.Size = this;
		}
		
		private void detach_MarkerDetails(MarkerDetail entity)
		{
			this.SendPropertyChanging();
			entity.Size = null;
		}
	}
}
#pragma warning restore 1591
